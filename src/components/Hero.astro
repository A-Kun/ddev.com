---
/**
 * The large, leading copy and image used on the homepage.
 */
import CtaButton from "../components/CtaButton.astro"
---

<script>
  const screens = [
    {
      clumps: [
        { transition: "type", lines: 1, wait: 1000 },
        { transition: "roll", lines: 2, wait: 1000 },
        { transition: "roll", lines: 4, wait: 1000 },
        { transition: "roll", lines: 2 },
      ],
      output: `ddev start

Starting my-project...
Container ddev-my-project-web  Running
Container ddev-my-project-dba  Running
Container ddev-my-project-db  Running
Container ddev-router  Running
<span class="text-green-500">Successfully started my-project</span>
<span class="text-green-500">Project can be reached at https://my-project.ddev.site https://127.0.0.1:51046</span>`,
    },
    {
      clumps: [
        { transition: "type", lines: 1, wait: 250 },
        { transition: "show", lines: 27 },
      ],
      output: `ddev describe
┌─────────────────────────────────────────────────────────────────────────────────────┐
│ Project: my-project ~/dev/my-project https://my-project.ddev.site                   │
│ Docker environment: docker 20.10.21                                                 │
├────────────┬──────┬────────────────────────────────────────────┬────────────────────┤
│ SERVICE    │ STAT │ URL/PORT                                   │ INFO               │
├────────────┼──────┼────────────────────────────────────────────┼────────────────────┤
│ web        │ <span class="text-green-500">OK</span>   │ https://my-project.ddev.site               │ php PHP8.1         │
│            │      │ InDocker: ddev-my-project-web:443,80,8025  │ nginx-fpm          │
│            │      │ Host: localhost:51046,51047                │ docroot:''         │
│            │      │                                            │ NodeJS:16          │
├────────────┼──────┼────────────────────────────────────────────┼────────────────────┤
│ db         │ <span class="text-green-500">OK</span>   │ InDocker: ddev-my-project-db:3306          │ mysql:8.0          │
│            │      │ Host: localhost:51045                      │ User/Pass: 'db/db' │
│            │      │                                            │ or 'root/root'     │
├────────────┼──────┼────────────────────────────────────────────┼────────────────────┤
│ PHPMyAdmin │ <span class="text-green-500">OK</span>   │ https://my-project.ddev.site:8037          │                    │
│            │      │ InDocker: ddev-my-project-dba:80,80        │                    │
│            │      │ \`ddev launch -p\`                           │                    │
├────────────┼──────┼────────────────────────────────────────────┼────────────────────┤
│ Mailhog    │      │ MailHog: https://my-project.ddev.site:8026 │                    │
│            │      │ \`ddev launch -m\`                           │                    │
├────────────┼──────┼────────────────────────────────────────────┼────────────────────┤
│ All URLs   │      │ https://my-project.ddev.site,              │                    │
│            │      │ https://127.0.0.1:51046,                   │                    │
│            │      │ http://my-project.ddev.site,               │                    │
│            │      │ http://127.0.0.1:51047                     │                    │
└────────────┴──────┴────────────────────────────────────────────┴────────────────────┘`,
    },
  ]

  // Element whose inner HTML will be our terminal output
  const stage = document.getElementById("animation-stage")
  // Seconds to wait after animation’s finished, before moving on to the next screen
  const pause = 5

  let activeScreen = 0
  let currentClump = 0
  let currentScreen = screens[activeScreen]
  let currentLine = 0

  /**
   * Kick off the whole show.
   */
  const play = () => {
    playNextClump()
  }

  /**
   * Transition in the next clump.
   */
  const playNextClump = () => {
    let outputLines = currentScreen.output.split("\n")
    let clump = currentScreen.clumps[currentClump]
    let clumpLine = 0

    // Animate in each line in the clump
    const player = setInterval(
      () => {
        if (clumpLine < clump.lines) {
          if (clump.transition === "type") {
            typeInText(outputLines[currentLine])
            clumpLine += 1
            currentLine += 1
          } else if (clump.transition === "roll") {
            stage.innerHTML += outputLines[currentLine] + "\n"
            clumpLine += 1
            currentLine += 1
          } else if (clump.transition === "show") {
            while (clumpLine < clump.lines) {
              stage.innerHTML += outputLines[currentLine] + "\n"
              clumpLine += 1
              currentLine += 1
            }
          }
        } else {
          clearInterval(player)

          if (currentClump === currentScreen.clumps.length - 1) {
            pauseAndAdvance()
          } else {
            pauseAndContinue(clump.wait ?? 0)
          }
        }
      },
      clump.transition === "type" ? 1000 : 100
    )
  }

  const typeInText = (text: string) => {
    const chars = text.split("")
    let currentChar = 0

    const player = setInterval(() => {
      if (currentChar < chars.length) {
        stage.innerHTML += chars[currentChar]
        currentChar += 1
      } else {
        clearInterval(player)
        stage.innerHTML += "\n"
      }
    }, 35)
  }

  /**
   * Wait a moment, then continue transitioning in the next clump.
   */
  const pauseAndContinue = (duration: number) => {
    // console.log(`pauseAndContinue()`)
    const pauser = setTimeout(() => {
      currentClump += 1
      playNextClump()
    }, duration)
  }

  /**
   * Wait a moment, then show the next screen.
   */
  const pauseAndAdvance = () => {
    // console.log(`pauseAndAdvance()`)
    const pauser = setTimeout(() => {
      if (activeScreen < screens.length - 1) {
        activeScreen += 1
      } else {
        activeScreen = 0
      }
      currentClump = 0
      currentScreen = screens[activeScreen]
      currentLine = 0
      stage.innerHTML = ""
      play()
    }, pause * 1000)
  }

  window.addEventListener("load", play())
</script>

<style is:global lang="postcss">
  .terminal-wrapper {
    @apply rounded-lg;
    background: #2e3440;
  }

  .prose .terminal-wrapper pre {
    @apply my-0;
  }
</style>

<div class="mt-12 py-32 relative overflow-x-hidden">
  <div class="z-10 max-w-4xl mx-auto relative">
    <div class="max-w-2xl px-6 lg:px-0">
      <h1 class="text-5xl font-bold">
        Docker-based PHP development environments.
      </h1>
      <h2 class="text-2xl my-6">
        Container superpowers with zero required Docker skills: environments in
        minutes, multiple concurrent projects, and less time to deployment.
      </h2>

      <div
        class="my-8 flex-cols space-y-4 md:flex md:space-x-4 md:space-y-0 md:w-3/4"
      >
        <CtaButton text="Get Started" href="/get-started" />
        <CtaButton
          text="Documentation"
          href="https://ddev.readthedocs.io/"
          type="hollow"
          target="_blank"
        />
      </div>
    </div>
  </div>

  <div class="w-full h-72 absolute top-0 z-0" style="right: -40rem;">
    <div class="mx-auto h-full" style="max-width: 49.25rem;">
      <div class="terminal-wrapper">
        <div class={`top-bar flex p-3 space-x-2 rounded-t-lg`}>
          <div class="block rounded-full bg-slate-500 w-3 h-3"></div>
          <div class="block rounded-full bg-slate-500 w-3 h-3"></div>
          <div class="block rounded-full bg-slate-500 w-3 h-3"></div>
        </div>
        <div class="overflow-hidden my-0">
          <div class="h-full p-4 text-slate-300 text-xs" style="height: 540px;">
            <pre><span class="select-none text-slate-400">→ </span><span id="animation-stage" /></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
